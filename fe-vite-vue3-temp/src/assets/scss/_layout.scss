@charset "utf-8";
/*!
  Name: layout
  Author: william
  Author URI: 
  Description: layout would contain the main layout.
  Version: 1.0.1
	Tags: layout,aspect ratio,container,columns,break after,break before,break inside,box decoration break,box sizing,display,floats,clear,isolation,object fit,object position,overflow,overscroll behavior,position,top,left,right,bottom,visibility
  Update: February 19th,2024
*/

/* 
* 1. aspect-ratio
*/
.aspect-auto{
  aspect-ratio: auto;
}

.aspect-square{
  aspect-ratio: 1 / 1;
}

.aspect-video{
  aspect-ratio: 16 / 9;
}

.aspect-screen{
  aspect-ratio: 21 / 9;
}

.aspect-vertical{
  aspect-ratio: 9 / 16;
}

/* 
* 2. container
*/
.container{
  width: 100%;
}


/* 
* 3. columns
*/
$columns:(
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  10: 10,
  11: 11,
  12: 12,
  auto: auto,
  3xs: unquote(256+'px'),
  2xs: unquote(288+'px'),
  xs: unquote(320+'px'),
  sm: unquote(384+'px'),
  md: unquote(448+'px'),
  lg: unquote(512+'px'),
  xl: unquote(576+'px'),
  2xl: unquote(672+'px'),
  3xl: unquote(768+'px'),
  4xl: unquote(896+'px'),
  5xl: unquote(1024+'px'),
  6xl: unquote(1152+'px'),
  7xl: unquote(1280+'px'),
);
@for $i from 1 through length(map-keys($columns)) {
  .columns-#{nth(map-keys($columns), $i)}{
    -webkit-columns: nth(map-values($columns), $i);
       -moz-columns: nth(map-values($columns), $i);
            columns: nth(map-values($columns), $i);
  }

  .columns-#{nth(map-keys($columns), $i)}{
    -webkit-column-count: nth(map-values($columns), $i);
       -moz-column-count: nth(map-values($columns), $i);
            column-count: nth(map-values($columns), $i);
  }
}


/* 
* 4. break-after and break-before
*/
$breakAfterAndBefore: auto, avoid, always, all, avoid-page, page, left, right, recto, verso, avoid-column, column, avoid-region, region, inherit, initial, unset;
@each $break in $breakAfterAndBefore {
  .break-after-#{$break} {
    -webkit-column-break-after: $break;
            break-after: $break;
  }

  .break-before-#{$break} {
    -webkit-column-break-before: $break;
            break-before: $break;
  }
}


/* 
* 5. break-inside
*/
$breakInside: auto, avoid, avoid-page, avoid-column, avoid-region;
@each $break in $breakInside {
  .break-inside-#{$break} {
    -webkit-column-break-inside: $break;
            break-inside: $break;
  }
}


/* 
* 6. box-decoration-break
*/
$boxDecorationBreak: slice, clone;
@each $box in $boxDecorationBreak {
  .box-decoration-#{$box} {
    -webkit-box-decoration-break: $box;
            box-decoration-break: $box;
  }
}


/* 
* 7. box-sizing
*/
$boxSizing: border, content;
@each $box in $boxSizing {
  .box-#{$box} {
    box-sizing: #{$box}-box;
  }
}


/* 
* 8. display
*/
$display: block,inline-block,inline,flex,inline-flex,table,inline-table,table-caption,table-cell,table-column,table-column-group,table-footer-group,table-header-group,table-row-group,table-row,flow-root,grid,inline-grid,contents,list-item,none;
@each $name in $display {
  .#{$name} {
    display: #{$name};
  }
}


/* 
* 9. floats
*/
$floats: right, left, none;
@each $name in $floats {
  .float-#{$name} {
    float: #{$name};
  }
}


/* 
* 10. clear
*/
$clear: left, right, both, none;
@each $value in $clear {
  .clear-#{$value} {
    clear: #{$value};
  }
}


/* 
* 11. isolation
*/
$isolation: auto, isolate;
@each $value in $isolation {
  .isolation-#{$value} {
    isolation: #{$value};
  }
}


/* 
* 12. object-fit
*/
$objectFit: contain, cover, fill, none, scale-down;
@each $value in $objectFit {
  .object-#{$value} {
    object-fit: #{$value};
  }
}


/* 
* 13. object-position
*/
$objectPosition:(
  bottom: bottom,
  center: center,
  left: left,
  left-bottom: left bottom,
  left-top: left top,
  right: right,
  right-bottom: right bottom,
  right-top: right top,
  top: top,
);
@for $i from 1 through length(map-keys($objectPosition)) {
  .object-#{nth(map-keys($objectPosition), $i)}{
    object-position: nth(map-values($objectPosition), $i);
  }
}


/*
* 14. overflow and overflow-x and overflow-y
*/
$overflow: auto, hidden, clip, visible, scroll;
@each $value in $overflow {
  .overflow-#{$value} {
    overflow: #{$value};
  }

  .overflow-x-#{$value} {
    overflow-x: #{$value};
  }

  .overflow-y-#{$value} {
    overflow-y: #{$value};
  }
}


/*
* 15. overscroll-behavior and overscroll-behavior-x and overscroll-behavior-y
*/
$overScroll: auto, contain, none;
@each $value in $overScroll {
  .overscroll-#{$value} {
    overscroll-behavior: #{$value};
  }

  .overscroll-x-#{$value} {
    overscroll-behavior-x: #{$value};
  }

  .overscroll-y-#{$value} {
    overscroll-behavior-y: #{$value};
  }
}


/*
* 16. position
*/
$position: static, fixed, absolute, relative, sticky;
@each $value in $position {
  .#{$value} {
    position: #{$value};
  }
}


/*
* 16. top right bottom left
*/
$top: 0,unquote(1+'px'),unquote(2+'px'),unquote(4+'px'),unquote(6+'px'),unquote(8+'px'),unquote(10+'px'),unquote(12+'px'),unquote(14+'px'),unquote(16+'px'),unquote(18+'px'),unquote(20+'px'),unquote(24+'px'),unquote(28+'px'),unquote(32+'px'),unquote(36+'px'),unquote(40+'px'),unquote(44+'px'),unquote(48+'px'),unquote(56+'px'),unquote(64+'px'),unquote(80+'px'),unquote(96+'px'),unquote(112+'px'),unquote(128+'px'),unquote(144+'px'),unquote(160+'px'),unquote(176+'px'),unquote(192+'px'),unquote(208+'px'),unquote(224+'px'),unquote(240+'px'),unquote(256+'px'),unquote(288+'px'),unquote(320+'px'),unquote(384+'px'),25%,50%,33.33%,66.66%,75%,100%;
$right: $top;
$bottom: $top;
$left: $top;

@mixin inset($top:0,$right:0,$bottom:0,$left:0) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@for $i from 2 through length($top){
  $item: nth(($top), $i);
  $index: index($top,$item) - 2;
  .top-#{$index}{
    top: $item;
  }
  
  .right-#{$index}{
    right: $item;
  }
  
  .bottom-#{$index}{
    bottom: $item;
  }
  
  .left-#{$index}{
    left: $item;
  }

  .inset-#{$i}{
    @include inset($item,$item,$item,$item);
  }
  
  .inset-x-#{$i}{
    @include inset(auto,$item,auto,$item);
  }
  
  .inset-y-#{$i}{
    @include inset($item,auto,$item,auto);
  }
}

.inset-auto{
  @include inset(auto,auto,auto,auto);
}

.inset-x-auto{
  left: auto;
  right: auto;
}

.inset-y-auto{
  top: auto;
  bottom: auto;
}


/*
* 17. visibility
*/ 
$visibility: visible, hidden, collapse;
@each $value in $visibility {
  .#{$value} {
    visibility: #{$value};
  }
}


/*
* 18.z-index
*/ 
$z-index: auto,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;
@each $value in $z-index {
  .z-#{$value} {
    z-index: #{$value};
  }
}